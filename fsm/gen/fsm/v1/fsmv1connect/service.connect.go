// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fsm/v1/service.proto

package fsmv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	v1 "github.com/superfly/fsm/gen/fsm/v1"

	connect "connectrpc.com/connect"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FSMServiceName is the fully-qualified name of the FSMService service.
	FSMServiceName = "fsm.v1.FSMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FSMServiceListRegisteredProcedure is the fully-qualified name of the FSMService's ListRegistered
	// RPC.
	FSMServiceListRegisteredProcedure = "/fsm.v1.FSMService/ListRegistered"
	// FSMServiceListActiveProcedure is the fully-qualified name of the FSMService's ListActive RPC.
	FSMServiceListActiveProcedure = "/fsm.v1.FSMService/ListActive"
	// FSMServiceGetHistoryEventProcedure is the fully-qualified name of the FSMService's
	// GetHistoryEvent RPC.
	FSMServiceGetHistoryEventProcedure = "/fsm.v1.FSMService/GetHistoryEvent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fSMServiceServiceDescriptor               = v1.File_fsm_v1_service_proto.Services().ByName("FSMService")
	fSMServiceListRegisteredMethodDescriptor  = fSMServiceServiceDescriptor.Methods().ByName("ListRegistered")
	fSMServiceListActiveMethodDescriptor      = fSMServiceServiceDescriptor.Methods().ByName("ListActive")
	fSMServiceGetHistoryEventMethodDescriptor = fSMServiceServiceDescriptor.Methods().ByName("GetHistoryEvent")
)

// FSMServiceClient is a client for the fsm.v1.FSMService service.
type FSMServiceClient interface {
	ListRegistered(context.Context, *connect.Request[v1.ListRegisteredRequest]) (*connect.Response[v1.ListRegisteredResponse], error)
	ListActive(context.Context, *connect.Request[v1.ListActiveRequest]) (*connect.Response[v1.ListActiveResponse], error)
	GetHistoryEvent(context.Context, *connect.Request[v1.GetHistoryEventRequest]) (*connect.Response[v1.HistoryEvent], error)
}

// NewFSMServiceClient constructs a client for the fsm.v1.FSMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFSMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FSMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fSMServiceClient{
		listRegistered: connect.NewClient[v1.ListRegisteredRequest, v1.ListRegisteredResponse](
			httpClient,
			baseURL+FSMServiceListRegisteredProcedure,
			connect.WithSchema(fSMServiceListRegisteredMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listActive: connect.NewClient[v1.ListActiveRequest, v1.ListActiveResponse](
			httpClient,
			baseURL+FSMServiceListActiveProcedure,
			connect.WithSchema(fSMServiceListActiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHistoryEvent: connect.NewClient[v1.GetHistoryEventRequest, v1.HistoryEvent](
			httpClient,
			baseURL+FSMServiceGetHistoryEventProcedure,
			connect.WithSchema(fSMServiceGetHistoryEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fSMServiceClient implements FSMServiceClient.
type fSMServiceClient struct {
	listRegistered  *connect.Client[v1.ListRegisteredRequest, v1.ListRegisteredResponse]
	listActive      *connect.Client[v1.ListActiveRequest, v1.ListActiveResponse]
	getHistoryEvent *connect.Client[v1.GetHistoryEventRequest, v1.HistoryEvent]
}

// ListRegistered calls fsm.v1.FSMService.ListRegistered.
func (c *fSMServiceClient) ListRegistered(ctx context.Context, req *connect.Request[v1.ListRegisteredRequest]) (*connect.Response[v1.ListRegisteredResponse], error) {
	return c.listRegistered.CallUnary(ctx, req)
}

// ListActive calls fsm.v1.FSMService.ListActive.
func (c *fSMServiceClient) ListActive(ctx context.Context, req *connect.Request[v1.ListActiveRequest]) (*connect.Response[v1.ListActiveResponse], error) {
	return c.listActive.CallUnary(ctx, req)
}

// GetHistoryEvent calls fsm.v1.FSMService.GetHistoryEvent.
func (c *fSMServiceClient) GetHistoryEvent(ctx context.Context, req *connect.Request[v1.GetHistoryEventRequest]) (*connect.Response[v1.HistoryEvent], error) {
	return c.getHistoryEvent.CallUnary(ctx, req)
}

// FSMServiceHandler is an implementation of the fsm.v1.FSMService service.
type FSMServiceHandler interface {
	ListRegistered(context.Context, *connect.Request[v1.ListRegisteredRequest]) (*connect.Response[v1.ListRegisteredResponse], error)
	ListActive(context.Context, *connect.Request[v1.ListActiveRequest]) (*connect.Response[v1.ListActiveResponse], error)
	GetHistoryEvent(context.Context, *connect.Request[v1.GetHistoryEventRequest]) (*connect.Response[v1.HistoryEvent], error)
}

// NewFSMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFSMServiceHandler(svc FSMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fSMServiceListRegisteredHandler := connect.NewUnaryHandler(
		FSMServiceListRegisteredProcedure,
		svc.ListRegistered,
		connect.WithSchema(fSMServiceListRegisteredMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fSMServiceListActiveHandler := connect.NewUnaryHandler(
		FSMServiceListActiveProcedure,
		svc.ListActive,
		connect.WithSchema(fSMServiceListActiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fSMServiceGetHistoryEventHandler := connect.NewUnaryHandler(
		FSMServiceGetHistoryEventProcedure,
		svc.GetHistoryEvent,
		connect.WithSchema(fSMServiceGetHistoryEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fsm.v1.FSMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FSMServiceListRegisteredProcedure:
			fSMServiceListRegisteredHandler.ServeHTTP(w, r)
		case FSMServiceListActiveProcedure:
			fSMServiceListActiveHandler.ServeHTTP(w, r)
		case FSMServiceGetHistoryEventProcedure:
			fSMServiceGetHistoryEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFSMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFSMServiceHandler struct{}

func (UnimplementedFSMServiceHandler) ListRegistered(context.Context, *connect.Request[v1.ListRegisteredRequest]) (*connect.Response[v1.ListRegisteredResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fsm.v1.FSMService.ListRegistered is not implemented"))
}

func (UnimplementedFSMServiceHandler) ListActive(context.Context, *connect.Request[v1.ListActiveRequest]) (*connect.Response[v1.ListActiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fsm.v1.FSMService.ListActive is not implemented"))
}

func (UnimplementedFSMServiceHandler) GetHistoryEvent(context.Context, *connect.Request[v1.GetHistoryEventRequest]) (*connect.Response[v1.HistoryEvent], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fsm.v1.FSMService.GetHistoryEvent is not implemented"))
}
